#!/usr/bin/env ruby
require 'json'
require 'net/http'
require 'uri'

PROJECT_ID = ENV['PIVOTAL_PROJECT_ID']
TOKEN = ENV['PIVOTAL_TOKEN']
CURRENT_BRANCH_NAME = `git rev-parse --abbrev-ref HEAD`.chomp
CURRENT_STORY_ID = CURRENT_BRANCH_NAME.match(/\/([0-9]*)/)[1]

PERSON = Struct.new(:id, :name)
COMMENT = Struct.new(:person, :text, :time)
TASK = Struct.new(:description, :is_complete) do
  def complete?
    is_complete
  end
end

def require_story_id
  if CURRENT_STORY_ID == CURRENT_STORY_ID.to_i
    raise 'Story ID not an integer'
  end
end

class GetRequest
  def initialize(url)
    @url = url
  end

  def json
    url = URI.parse("https://www.pivotaltracker.com/services/v5/#{ @url }")
    http = Net::HTTP.new(url.host, url.port)
    http.use_ssl = true
    req = Net::HTTP::Get.new(url.request_uri)
    req["X-TrackerToken"] = TOKEN
    JSON.parse(http.request(req).body)
  end
end

class Story
  def initialize(story_id)
    @story_id = story_id
  end

  def eager_load
    people
    story_data
    labels
    comments
    tasks
    self
  end

  def people
    @people ||=
      GetRequest.new("/projects/#{ PROJECT_ID }/memberships").json.map do |person|
        PERSON.new(person['person']['id'], person['person']['name'])
      end
  end

  def name
    story_data['name']
  end

  def description
    story_data['description']
  end

  def requested_by
    people.detect { |person| person.id == story_data['requested_by_id'] }.name
  end

  def labels
    @labels ||= story_data['labels'].map { |label| label['name'] }
  end

  def url
    "https://www.pivotaltracker.com/story/show/#{ story_id }"
  end

  def comments
    @comments ||=
      GetRequest.new("projects/#{ PROJECT_ID }/stories/#{ story_id }/comments").json.map do |comment|
        COMMENT.new(
          people.detect { |person| person.id == comment['person_id'] }.name,
          comment['text'],
          comment['created_at']
        )
      end
  end

  def tasks
    @tasks ||=
      GetRequest.new("projects/#{ PROJECT_ID }/stories/#{ story_id }/tasks").json.map do |task|
        TASK.new(task['description'], task['complete'])
      end
  end

  private
  attr_reader :story_id

  def story_data
    @story_data ||= GetRequest.new("projects/#{ PROJECT_ID }/stories/#{ story_id }").json
  end
end

if ARGV.first == '--show_current_story'
  require_story_id
  story = Story.new(CURRENT_STORY_ID).eager_load

  IO.popen('less', 'w') do |io|
    io.puts story.url
    io.puts story.name
    io.puts ''

    unless story.description.to_s == ''
      io.puts story.description
      io.puts ''
    end

    io.puts "Requested by: #{ story.requested_by }"
    io.puts ''

    unless story.labels.empty?
      io.puts "Labels: #{ story.labels.map { |label| "[ #{ label } ]" }.join(' ') }"
      io.puts ''
    end

    unless story.tasks.empty?
      io.puts 'Tasks:'
      story.tasks.each do |task|
        prefix = task.complete? ? '[X]' : '[ ]'
        io.puts [ prefix, task.description ].join(' ')
      end
      io.puts ''
    end

    unless story.comments.empty?
      io.puts 'Comments'
      story.comments.each do |comment|
        io.puts "#{ comment.person } @ #{ comment.time }"
        io.puts comment.text
        io.puts '-'*20
      end
    end
  end
end
