#!/usr/bin/env ruby
require 'json'

current_branch_name = `git rev-parse --abbrev-ref HEAD`.chomp
current_story_id = current_branch_name.match(/\/([0-9]*)/)[1]
if current_story_id == current_story_id.to_i
  raise 'Story ID not an integer'
end

PERSON = Struct.new(:id, :name)
people = JSON.parse(`curl --silent -X GET -H "X-TrackerToken: #{ ENV['PIVOTAL_TOKEN'] }" "https://www.pivotaltracker.com/services/v5/projects/#{ ENV['PIVOTAL_PROJECT_ID'] }/memberships"`).map do |person|
  PERSON.new(person['person']['id'], person['person']['name'])
end

STORY = Struct.new(:name, :description, :requested_by, :labels, :url)
story_data = JSON.parse(`curl --silent -X PUT -H "X-TrackerToken: #{ ENV['PIVOTAL_TOKEN'] }" "https://www.pivotaltracker.com/services/v5/projects/#{ ENV['PIVOTAL_PROJECT_ID'] }/stories/#{ current_story_id }"`)
story = STORY.new(
  story_data['name'],
  story_data['description'],
  people.detect { |person| person.id == story_data['requested_by_id'] }.name,
  story_data['labels'].map { |label| label['name'] },
  "https://www.pivotaltracker.com/story/show/#{ story_data['id'] }"
)

COMMENT = Struct.new(:person, :text, :time)
comments = JSON.parse(`curl --silent -X GET -H "X-TrackerToken: #{ ENV['PIVOTAL_TOKEN'] }" "https://www.pivotaltracker.com/services/v5/projects/#{ ENV['PIVOTAL_PROJECT_ID'] }/stories/#{ current_story_id }/comments"`).map do |comment|
  COMMENT.new(
    people.detect { |person| person.id == comment['person_id'] }.name,
    comment['text'],
    comment['created_at']
  )
end

TASK = Struct.new(:description, :is_complete) do
  def complete?
    is_complete
  end
end
tasks = JSON.parse(`curl --silent -X GET -H "X-TrackerToken: #{ ENV['PIVOTAL_TOKEN'] }" "https://www.pivotaltracker.com/services/v5/projects/#{ ENV['PIVOTAL_PROJECT_ID'] }/stories/#{ current_story_id }/tasks"`).map do |task|
  TASK.new(task['description'], task['complete'])
end

IO.popen('less', 'w') do |io|
  io.puts story.url
  io.puts story.name
  io.puts ''

  unless story.description.to_s == ''
    io.puts story.description
    io.puts ''
  end

  io.puts "Requested by: #{ story.requested_by }"
  io.puts ''

  unless story.labels.empty?
    io.puts "Labels: #{ story.labels.map { |label| "[ #{ label } ]" }.join(' ') }"
    io.puts ''
  end

  unless tasks.empty?
    io.puts 'Tasks:'
    tasks.each do |task|
      prefix = task.complete? ? '[X]' : '[ ]'
      io.puts [ prefix, task.description ].join(' ')
    end
    io.puts ''
  end

  unless comments.empty?
    io.puts 'Comments'
    comments.each do |comment|
      io.puts "#{ comment.person } @ #{ comment.time }"
      io.puts comment.text
      io.puts '-'*20
    end
  end
end
