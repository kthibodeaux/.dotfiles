vim.lsp.enable('golangci_lint_ls')
vim.lsp.enable('gopls')
vim.lsp.enable('luals')
vim.lsp.enable('rubocop')
vim.lsp.enable('ruby_lsp')
vim.lsp.enable('ts_ls')

vim.fn.sign_define("DiagnosticSignError", {text = "", texthl = "DiagnosticSignError"})
vim.fn.sign_define("DiagnosticSignWarn",  {text = "", texthl = "DiagnosticSignWarn"})
vim.fn.sign_define("DiagnosticSignInfo",  {text = "", texthl = "DiagnosticSignInfo"})
vim.fn.sign_define("DiagnosticSignHint",  {text = "", texthl = "DiagnosticSignHint"})

vim.api.nvim_set_keymap('n', '<leader>la', '<CMD> lua vim.lsp.buf.code_action()<CR>', { noremap = true, desc = 'code action' })
vim.api.nvim_set_keymap('n', '<leader>lp', '<CMD> lua vim.diagnostic.setqflist()<CR>', { noremap = true, desc = 'project diagnostics' })
vim.api.nvim_set_keymap('n', '<leader>ll', '<CMD> lua vim.diagnostic.open_float()<CR>', { noremap = true, desc = 'line diagnostics' })
vim.api.nvim_set_keymap('n', '<leader>lh', '<CMD> lua vim.lsp.buf.hover()<CR>', { noremap = true, desc = 'documentation' })
vim.api.nvim_set_keymap('n', '<leader>ld', '<C-]>', { noremap = true, desc = 'go to definition' })
vim.api.nvim_set_keymap('n', '<leader>lr', '<CMD> lua vim.lsp.buf.references()<CR>', { noremap = true, desc = 'references' })
vim.api.nvim_set_keymap('n', '<leader>ln', '<CMD> lua vim.lsp.buf.rename()<CR>', { noremap = true, desc = 'rename' })
